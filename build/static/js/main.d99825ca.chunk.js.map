{"version":3,"sources":["Img/fondo_home.png","Components/Header/Header1.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header1","className","Home","props","state","alt","src","fondo","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,wC,kOCgB5BC,G,MAZC,WACd,OACE,yBAAKC,UAAU,aACb,wCACA,yBAAKA,UAAU,sBACb,4BAAQA,UAAU,4BAAlB,WACA,4BAAQA,UAAU,2BAAlB,a,gBCsCOC,G,kBAtCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,sEAQf,OACI,yBAAKH,UAAU,UACX,yBAAKI,IAAI,GAAGC,IAAKC,IAAON,UAAU,qBAClC,6BAASA,UAAU,kBACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,UAAd,UACA,wBAAIA,UAAU,UAAd,YAEJ,4BAAQA,UAAU,8BAAlB,cAEJ,6BAASA,UAAU,sBACf,yBAAKA,UAAU,mBACX,uEAEJ,yBAAKA,UAAU,mBACX,0GAGR,6BAASA,UAAU,kBACf,yBAAKA,UAAU,UACX,6G,GA/BLO,c,MCWJC,MAXf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCCcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d99825ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fondo_home.bc5159c7.png\";","import React from \"react\";\r\n\r\nimport \"./Header1.css\";\r\n\r\nconst Header1 = () => {\r\n  return (\r\n    <div className=\"o-header1\">\r\n      <h5>Hypnotic</h5>\r\n      <div className=\"o-access-container\">\r\n        <button className=\"o-button o-button-signin\">Sign in</button>\r\n        <button className=\"o-button o-button-login\">Login</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header1;\r\n","import React, { Component } from 'react'\r\n\r\nimport Header1 from '../Header/Header1'\r\n\r\nimport fondo from '../../Img/fondo_home.png'\r\n\r\nimport './Home.css'\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"o-home\">\r\n                <img alt=\"\" src={fondo} className=\"o-img-fondo-home\"/>\r\n                <section className=\"o-home-section\">\r\n                    <Header1 />\r\n                    <div className=\"o-title-home\">\r\n                        <h1 className=\"o-text\">E-come</h1>\r\n                        <h4 className=\"o-text\">Welcome</h4>\r\n                    </div>\r\n                    <button className=\"o-button o-button-readmore\">Read More</button>\r\n                </section>\r\n                <section className=\"o-readmore-section\">\r\n                    <div className=\"o-readmore-text\">\r\n                        <h5>Disconnect your devices from one place</h5>\r\n                    </div>\r\n                    <div className=\"o-readmore-text\">\r\n                        <h5>Did you forget to turn off your tv? Don't you worry, we'll do it for you</h5>\r\n                    </div>\r\n                </section>\r\n                <section className=\"o-info-section\">\r\n                    <div className=\"o-info\">\r\n                        <h5>Do not waste energy on your devices, turn them off and help the planet</h5>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home","import React from 'react';\r\nimport Home from '../src/Components/Home/Home';\r\n// import Login from '../src/Components/Login/Login';\r\n// import Signup from '../src/Components/Signup/Signup';\r\n// import Profile from '../src/Components/Profile/Profile';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n      {/* <Login />\r\n      <Signup />\r\n      <Profile /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}